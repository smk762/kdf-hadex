#!/command/with-contenv bash
# shellcheck shell=bash
set -euo pipefail


echo "[kdf] Setup script starting..."
echo "[kdf] Current time: $(date)"


# Create the required directories
# /data maps to <ADDON_PATH> on host
# ~/.kdf in container should map to <ADDON_PATH>/.kdf/ on host
mkdir -p /data/logs
mkdir -p /root/.kdf

# Create default panel cache config if missing to prevent excessive external API calls
PANEL_CACHE_CFG="/data/panel_cache_config.json"
if [[ ! -f "${PANEL_CACHE_CFG}" ]]; then
    echo "[kdf] Creating default panel cache config at ${PANEL_CACHE_CFG}"
    cat > "${PANEL_CACHE_CFG}" <<'JSON'
{
  "tickers": 3600,
  "enabled_coins": 60,
  "peers": 60,
  "best_orders": 30,
  "orderbook": 10,
  "active_swaps": 30,
  "my_orders": 60,
  "recent_swaps": 60,
  "coingecko_prices": 300
}
JSON
else
    echo "[kdf] panel cache config already present at ${PANEL_CACHE_CFG}"
fi

# Check if web files exist (copied during build)
echo "[kdf] Checking web files for panel server..."
if [[ -f /root/www/kdf-panel.html ]]; then
    echo "[kdf] Web files found in /root/www/"
    ls -la /root/www/
else
    echo "[kdf] Warning: Web files not found in /root/www/"
fi

# Determine no_login flag from user options; default true
NO_LOGIN=$(jq -r '.no_login // true' "$OPTIONS_FILE" 2>/dev/null || echo "true")



# Ensure kdf_method_versions.json exists in /data and is refreshed when the image example changes
EXAMPLE_METHODS_FILE="/root/www/kdf_method_versions.example.json"
DEST_METHODS_FILE="/data/kdf_method_versions.json"
METHODS_SHA_FILE="/data/.kdf_method_versions.sha"
if [[ -f "${EXAMPLE_METHODS_FILE}" ]]; then
    # compute checksum using sha256sum if available, fallback to md5sum
    if command -v sha256sum >/dev/null 2>&1; then
        NEW_SHA=$(sha256sum "${EXAMPLE_METHODS_FILE}" | awk '{print $1}')
    elif command -v md5sum >/dev/null 2>&1; then
        NEW_SHA=$(md5sum "${EXAMPLE_METHODS_FILE}" | awk '{print $1}')
    else
        NEW_SHA=""
    fi

    PREV_SHA=""
    if [[ -f "${METHODS_SHA_FILE}" ]]; then
        PREV_SHA=$(cat "${METHODS_SHA_FILE}" 2>/dev/null || echo "")
    fi

    if [[ "${NEW_SHA}" != "${PREV_SHA}" || ! -f "${DEST_METHODS_FILE}" ]]; then
        echo "[kdf] Deploying kdf_method_versions.json from example"
        cp "${EXAMPLE_METHODS_FILE}" "${DEST_METHODS_FILE}" || echo "[kdf] Warning: failed to copy method versions example"
        if [[ -n "${NEW_SHA}" ]]; then
            echo "${NEW_SHA}" > "${METHODS_SHA_FILE}"
        fi
    else
        echo "[kdf] kdf_method_versions.json up-to-date"
    fi
fi
