#!/bin/bash
#!/bin/bash
# kdf-version: get KDF version from local RPC using options.json for auth

# Require options.json as the authoritative source for rpc_password
OPTIONS_FILE="/data/options.json"

if ! pgrep -f "/usr/local/bin/kdf" >/dev/null 2>&1; then
    # KDF is not running
    if [ -f /tmp/kdf-setup-complete ]; then
        echo "KDF not running - check logs for errors"
    else
        echo "KDF not running - setup incomplete"
    fi
    exit 0
fi

if [ ! -f "$OPTIONS_FILE" ]; then
    echo "ERROR: $OPTIONS_FILE not found; rpc_password must be provided in options.json"
    exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
    echo "ERROR: jq not available; required to parse $OPTIONS_FILE"
    exit 1
fi

RPC_PASS=$(jq -r '.rpc_password // ""' "$OPTIONS_FILE" 2>/dev/null || echo "")

if [ -z "$RPC_PASS" ] || [ "$RPC_PASS" = "CHANGE_ME" ]; then
    echo "ERROR: rpc_password is missing or invalid in $OPTIONS_FILE"
    exit 1
fi

# Make RPC call to get version
RESPONSE=$(curl -s --url "http://127.0.0.1:7783" --data "{\"method\": \"version\", \"userpass\": \"$RPC_PASS\"}" 2>/dev/null)

if [ -n "$RESPONSE" ]; then
    VERSION=$(echo "$RESPONSE" | jq -r '.result // empty' 2>/dev/null)
    if [ -n "$VERSION" ] && [ "$VERSION" != "null" ]; then
        echo "$VERSION"
        exit 0
    else
        echo "KDF running - RPC version unavailable"
        exit 1
    fi
else
    echo "KDF running - RPC connection failed"
    exit 1
fi
